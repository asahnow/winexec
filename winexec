#!/usr/bin/env bash
# Modified from https://github.com/winapps-org/winapps/blob/main/bin/winapps

set -o errexit
set -o pipefail
set -o nounset

declare -ir EC_FAIL_START=3
declare -ir EC_FAIL_RESUME=4
declare -ir EC_FAIL_DESTROY=5
declare -ir EC_SD_TIMEOUT=6
declare -ir EC_DIE_TIMEOUT=7
declare -ir EC_NOT_EXIST=8
declare -ir EC_NOT_IN_GROUP=9
declare -ir EC_NO_IP=10
declare -ir EC_BAD_PORT=11

declare -r VM_NAME='win11'
declare -ir RDP_PORT=3389

declare RDP_IP
declare RDP_USER
declare RDP_PASS
declare -i FREERDP_PID=-1

trap cleanup EXIT

cleanup() {
  # Kill FreeRDP
  (( FREERDP_PID > 0 )) && kill -9 "${FREERDP_PID}" &>/dev/null

  # Terminate the script
  exit
}

send_notification() {
  # Declare variables
  local message="$1"
  local -i duration="${2:-3}"

  # Read from stdin if `message` is unset
  if [[ -z "${message}" ]]; then
    while IFS= read -r line; do
      message+="${line}"
    done
  fi

  # Convert to milliseconds
  (( duration *= 1000 ))
  
  notify-send --expire-time="${duration}" --urgency='low' 'Windows' "${message}"
}

exit_with_error() {
  # Declare error code variable
  local -i err_code="$1"
  
  # Notify user of specific error
  case "${err_code}" in
    "${EC_FAIL_START}")
      send_notification 'The virtual machine failed to start.' '8'
      err_code=69
      ;;
    "${EC_FAIL_RESUME}")
      send_notification 'The virtual machine failed to resume.' '8'
      err_code=69
      ;;
    "${EC_FAIL_DESTROY}")
      send_notification \
        'The virtual machine failed to shut down forcefully.' \
        '8'
      err_code=69
      ;;
    "${EC_SD_TIMEOUT}")
      send_notification 'The virtual machine took too long to shut down.' '8'
      err_code=69
      ;;
    "${EC_DIE_TIMEOUT}")
      send_notification 'The virtual machine took too long to die.' '8'
      err_code=69
      ;;
    "${EC_NOT_EXIST}")
      send_notification 'The virtual machine does not exist.' '8'
      err_code=69
      ;;
    "${EC_NOT_IN_GROUP}")
      send_notification \
        "The user $(id -nu) is not part of the required groups." \
        '8'
      err_code=77
      ;;
    "${EC_NO_IP}")
      send_notification '' '8' <<-END
				The virtual machine is unreachable.\n
				Please ensure Windows is assigned an IP address.
			END
			err_code=68
			;;
		"${EC_BAD_PORT}")
      send_notification '' '8' <<-END
				The Windows RDP port ${RDP_PORT} is closed.\n
				Please ensure Remote Desktop is correctly configured on Windows.
			END
			err_code=69
			;;
  esac

  # Terminate the script
  exit "${err_code}"
}

is_user_group_member() {
  # Identify groups the current user belongs to
  local -r user_groups="$(groups "$(whoami)")"

  if ! (grep -qE '\bkvm\b' <<< "${user_groups}") \
    || ! (grep -qE '\blibvirt\b' <<< "${user_groups}"); then
    exit_with_error "${EC_NOT_IN_GROUP}"
  fi
}

is_vm_running() {
  # Declare exit status variable
  local -i exit_status=0

  # Declare timer variables
  local -i time_elapsed=0
  local -ir time_limit=60
  local -ir time_interval=5

  # Attempt to start Windows VM
  if (virsh list --all --name | xargs | grep -wq "${VM_NAME}"); then
    if (virsh list --state-shutoff --name | xargs | grep -wq "${VM_NAME}"); then
      send_notification 'Booting the virtual machine.'
      virsh start "${VM_NAME}" &>/dev/null || exit_status="${EC_FAIL_START}"
      if (virsh list --state-paused --name \
        | xargs \
        | grep -wq "${VM_NAME}"); then
        send_notification 'Resuming the virtual machine.'
        virsh resume "${VM_NAME}" &>/dev/null || exit_status="${EC_FAIL_RESUME}"
      fi
    elif (virsh list --state-paused --name \
      | xargs \
      | grep -wq "${VM_NAME}"); then
      send_notification 'Resuming the virtual machine.'
      virsh resume "${VM_NAME}" &>/dev/null || exit_status="${EC_FAIL_RESUME}"
    elif (virsh list --state-other --name | xargs | grep -wq "${VM_NAME}"); then
      if (virsh domstate "${VM_NAME}" | xargs | grep -wq 'shutdown'); then
        send_notification '' '' <<-END
					The virtual machine is currently shutting down.\n
					It will automatically restart once the shutdown process is complete.
				END
        exit_status="${EC_SD_TIMEOUT}"
        while (( time_elapsed < time_limit )); do
          if (virsh list --state-shutoff --name \
            | xargs \
            | grep -wq "${VM_NAME}"); then
            exit_status=0
            send_notification 'Booting the virtual machine.'
            virsh start "${VM_NAME}" &>/dev/null \
              || exit_status="${EC_FAIL_START}"
            break
          fi
          sleep "${time_interval}"
          (( time_elapsed += time_interval ))
        done
      elif (virsh domstate "${VM_NAME}" | xargs | grep -wq 'crashed'); then
        send_notification '' '' <<-END
					The virtual machine experienced an unexpected crash.\n
					Attempting to restart.
				END
        virsh destroy "${VM_NAME}" &>/dev/null \
          || exit_status="${EC_FAIL_DESTROY}"
        if (( exit_status == 0 )); then
          send_notification 'Booting the virtual machine.'
          virsh start "${VM_NAME}" &>/dev/null || exit_status="${EC_FAIL_START}"
        fi
      elif (virsh domstate "${VM_NAME}" | xargs | grep -wq 'dying'); then
        send_notification '' '' <<-END
					The virtual machine is currently shutting down unexpectedly.\n
					It will try to restart once the shutdown process finishes.
				END
        exit_status="${EC_DIE_TIMEOUT}"
        while (( time_elapsed < time_limit )); do
          if (virsh domstate "${VM_NAME}" | xargs | grep -wq 'crashed'); then
            exit_status=0
            send_notification '' '' <<-END
							The virtual machine experienced an unexpected crash.\n
							Attempting to restart.
						END
            virsh destroy "${VM_NAME}" &>/dev/null \
              || exit_status="${EC_FAIL_DESTROY}"
            if (( exit_status == 0 )); then
              send_notification 'Booting the virtual machine.'
              virsh start "${VM_NAME}" &>/dev/null \
                || exit_status="${EC_FAIL_START}"
            fi
            break
          elif (virsh list --state-shutoff --name \
            | xargs \
            | grep -wq "${VM_NAME}"); then
            exit_status=0
            send_notification 'Booting the virtual machine.'
            virsh start "${VM_NAME}" &>/dev/null \
              || exit_status="${EC_FAIL_START}"
            break
          fi
          sleep "${time_interval}"
          (( time_elapsed += time_interval ))
        done
      elif (virsh domstate "${VM_NAME}" | xargs | grep -wq 'pmsuspended'); then
        send_notification 'Resuming the virtual machine.'
        virsh resume "${VM_NAME}" &>/dev/null || exit_status="${EC_FAIL_RESUME}"
      fi
    fi
  else
    exit_status="${EC_NOT_EXIST}"
  fi

  if (( exit_status != 0)); then
    exit_with_error ${exit_status}
  else
    return 0
  fi
}

is_port_open() {
  # Store MAC address of virtual machine
  local vm_mac

  # Declare timer variables
  local -i time_elapsed=0
  local -ir time_limit=30
  local -ir time_interval=5

  # Get virtual machine's ip address
  if ! [[ -v RDP_IP ]]; then
    vm_mac="$(virsh domiflist "${VM_NAME}" \
      | grep -oE '([0-9A-Fa-f]{2}[:-]){5}([0-9A-Fa-f]{2})')"

    while (( time_elapsed < time_limit )); do
      if (( time_elapsed == time_interval )); then
        send_notification 'Requesting IP address of virtual machine.'
      fi
      RDP_IP="$(ip neigh show \
        | grep "${vm_mac}" \
        | grep -oE '([0-9]{1,3}\.){3}[0-9]{1,3}')"
      [[ -n "${RDP_IP}" ]] && break
      sleep "${time_interval}"
      (( time_elapsed += time_interval ))
    done

    [[ -z "${RDP_IP}" ]] && exit_with_error "${EC_NO_IP}"
  fi

  # Check for open RDP port
  timeout 10 nc -z "${RDP_IP}" "${RDP_PORT}" &>/dev/null \
    || exit_with_error "$EC_BAD_PORT"
}

run_command() {
  # Open full Windows RDP session
  if [[ "$1" == 'windows' ]]; then

    xfreerdp \
      /v:"${RDP_IP}" \
      /u:"${RDP_USER}" \
      /p:"${RDP_PASS}" \
      /cert:ignore \
      +auto-reconnct \
      +clipboard \
      +dynamic-resolution \
      -wallpaper \
      /wm-class:'Microsoft Windows' \
      /t:"Windows RDP Session: ${RDP_IP}" &>/dev/null &

    FREERDP_PID="$!"

  # Attempt to open specified Windows application
  elif [[ -n "$1" ]]; then
    xfreerdp \
      /v:"${RDP_IP}" \
      /u:"${RDP_USER}" \
      /p:"${RDP_PASS}" \
      /cert:ignore \
      +auto-reconnct \
      +clipboard \
      +dynamic-resolution \
      -wallpaper \
      /wm-class:"$2" \
      /app:program:"$2" &>/dev/null &
    
    FREERDP_PID="$!"
  fi
}

main() {
  is_user_group_member
  is_vm_running
  is_port_open
  run_command "$@"
}

main "$@"
